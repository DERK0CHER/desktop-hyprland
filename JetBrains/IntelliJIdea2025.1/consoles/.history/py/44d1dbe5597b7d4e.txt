import gi
gi.require_version('Gtk', '4.0')
gi.require_version('Adw', '1')
from gi.repository import Gtk, Adw

# Initialize Adw
Adw.init()

# Create a simple application
app = Adw.Application(application_id="org.example.test")
app.run(None)

-. . -..- - / . -. - .-. -.--
#!/usr/bin/env python3
import sys
import gi

# Try to import GTK4 and Adw
try:
    gi.require_version('Gtk', '4.0')
    gi.require_version('Adw', '1')
    from gi.repository import Gtk, Adw
    print("Successfully imported GTK4 and Adwaita")
except Exception as e:
    print(f"Error importing GTK4/Adwaita: {e}")
    sys.exit(1)

# Try to import GtkSource
try:
    gi.require_version('GtkSource', '5')
    from gi.repository import GtkSource
    print("Successfully imported GtkSource")
except Exception as e:
    print(f"Error importing GtkSource: {e}")
    # Not exiting for this one as it might be optional

# Initialize Adw
print("Initializing Adwaita...")
Adw.init()
print("Adwaita initialized successfully")

# Create a basic application
class TestApp(Adw.Application):
    def __init__(self):
        super().__init__(application_id="org.test.app")

    def do_activate(self):
        window = Adw.ApplicationWindow(application=self)
        window.set_default_size(400, 300)
        window.set_title("GTK4/Adwaita Test")

        box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        box.set_margin_top(24)
        box.set_margin_bottom(24)
        box.set_margin_start(24)
        box.set_margin_end(24)

        window.set_content(box)

        label = Gtk.Label(label="GTK4 and Adwaita are working!")
        box.append(label)

        window.present()

if __name__ == "__main__":
    print("Starting test application...")
    app = TestApp()
    print("Application created, running...")
    app.run([])

-. . -..- - / . -. - .-. -.--
zs
-. . -..- - / . -. - .-. -.--
#!/usr/bin/env python3
import sys
import gi

# Configure GTK4 and Adwaita
gi.require_version('Gtk', '4.0')
gi.require_version('Adw', '1')
from gi.repository import Gtk, Adw, Gio, GLib

# Initialize Adwaita
Adw.init()

class SilkTexApplication(Adw.Application):
    def __init__(self, version="0.1.0"):
        super().__init__(application_id='org.example.silktex',
                         flags=Gio.ApplicationFlags.FLAGS_NONE)
        self.version = version

        # Set up actions
        self.create_action('quit', self.on_quit_action, ['<primary>q'])
        self.create_action('about', self.on_about_action)

    def do_activate(self):
        win = self.props.active_window
        if not win:
            win = SilkTexWindow(application=self)
        win.present()

    def on_quit_action(self, widget, _):
        self.quit()

    def on_about_action(self, widget, _):
        about = Adw.AboutWindow(transient_for=self.props.active_window,
                                application_name='SilkTex',
                                application_icon='org.example.silktex',
                                developer_name='SilkTex Team',
                                version=self.version,
                                copyright='Â© 2023 SilkTex Team')
        about.present()

    def create_action(self, name, callback, shortcuts=None):
        action = Gio.SimpleAction.new(name, None)
        action.connect("activate", callback)
        self.add_action(action)
        if shortcuts:
            self.set_accels_for_action(f"app.{name}", shortcuts)


class SilkTexWindow(Adw.ApplicationWindow):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)

        # Basic window setup
        self.set_default_size(1000, 700)
        self.set_title("SilkTex")

        # Create a box for content
        self.box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.set_content(self.box)

        # Create a header bar
        self.header = Adw.HeaderBar()
        self.box.append(self.header)

        # Add a label
        self.content_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.content_box.set_margin_top(50)
        self.content_box.set_margin_bottom(50)
        self.content_box.set_margin_start(50)
        self.content_box.set_margin_end(50)
        self.content_box.set_halign(Gtk.Align.CENTER)
        self.content_box.set_valign(Gtk.Align.CENTER)

        self.box.append(self.content_box)

        label = Gtk.Label()
        label.set_markup("<span size='xx-large' weight='bold'>SilkTex</span>")
        self.content_box.append(label)

        desc_label = Gtk.Label(label="LaTeX Editor with Live Preview")
        self.content_box.append(desc_label)

-. . -..- - / . -. - .-. -.--
import os
import pathlib
print(f"Current directory: {os.getcwd()}")
print(f"Directory contents: {list(pathlib.Path('.').iterdir())}")

-. . -..- - / . -. - .-. -.--
import os
import pathlib
print(f"src directory contents: {list(pathlib.Path('src').iterdir())}")
